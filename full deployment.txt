pipeline{
    environment {
    registry = "userid/image-name"
    registryCredential = 'credentialkey'
  }
  agent any
  stages {
    stage('Cloning Git') {
      steps {
        git 'git url'
      }
    }
         stage('Clean Old Packages') {
             steps{
                           dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
{
        sh label: 'Clean', script: 'mvn clean'
    }
             }
         }
        stage('Maven Compile') {
        steps{
                      dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
{
        sh label: 'Compile', script: 'mvn compile'
    }
        }
        }
        stage('Sonar Analysis'){
        steps{
            dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
{
        withSonarQubeEnv('SonarQube'){
         sh 'mvn sonar:sonar'
            }
}
        }
        }
    stage('Maven Package') {
    steps{
                  dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
{
    sh label: 'Testing', script: 'mvn clean install'
    }
    }
    }
    stage('Jfrog Artifacory')
    {
        steps{
    script{
        def server= Artifactory.server 'Artifactory'
                    def uploadSpec= """{
                        "files": [{
                        "pattern": "/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/target/*.war",
                        "target": "Target_snapshots_repository"}]
                    }"""
        server.upload(uploadSpec)
        }
    }
    }
    
    stage('Jfrog Artifactory download'){
    
     steps{
     script{
    def server= Artifactory.server 'Artifactory'
    def downloadSpec = """{
    "files": [
    {
      "pattern": "Target_snapshots_repository/employee-0.0.1-SNAPSHOT.war",
      "target": "/home/DevOpsTeam2/chakradhar/artifactroydownload/"
    }
    ]
    }"""
    server.download(downloadSpec)
  
}
        
     }
 
    }
    stage('create image') {
      steps{
          dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
          {
        script {
          docker.build registry + ":$BUILD_NUMBER"
        }
      }
      }
    }
    stage('Building image') {
      steps{
          dir("/var/lib/jenkins/workspace/chakradhar_userpage_project_completepipeline/employee/")
          {
        script {
          dockerImage = docker.build registry + ":$BUILD_NUMBER"
        }
      }
      }
    }
    stage('Deploy Image') {
      steps{
        script {
          docker.withRegistry( '', registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage('Remove Unused docker image') {
      steps{
        sh "docker rmi $registry:$BUILD_NUMBER"
      }
    }
    stage('pull image from dockerhub'){
    steps{
        script{
             sh "docker pull $registry:$BUILD_NUMBER"
       
    }
    }
  }
  stage('deployee the image in the tomcat server'){
      steps{
          script{
              sh"docker run -d -it -p 8083:8080 --name persondetails_deployed_through_pipeline_script -v /var/lib/tomcat8/conf/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml $registry:$BUILD_NUMBER"
             
          }
      }
  }
  }
}